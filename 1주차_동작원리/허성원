- 자바 컴파일 과정
*.java ----(자바 컴파일러)----> *.class --->JVM(로딩->배치->실행)
 빌드 시, 자바 파일(*.java)을 자바 컴파일러(javac.exe)를 이용하여 JVM이 이해할 수 있는 중간단계의 언어 바이트 코드(*.class)로 바꿔준다.
 런타임 시, 바이트코드를 기계어로 바꿔주는데 이 역할을 JVM에서 한다. Class Loader를 통해 바이트코드를 JVM내로 로드하고, Runtime Data Area를 거쳐 실행엔진으로 간다.
 실행엔진에는 바이트코드로 변환하는 2가지 방식이 있는데 이 과정에서 byte code가 Binary code로 변경된다.
 2가지 방식은 인터프리터와 JIT(Just In Time) 컴파일러방식이다. 
 인터프리터 방식은 사용자가 작성한 소스코드를 '한 문장씩 읽고' 바로 기계어로 바꿔준다.
 JIT 컴파일러는 인터프리터 방식을 사용하다가 적정한 때에 바이트코드 전체를 기계어로 바꾸는 방식을 취한다. 
 JIT Compiler에 의해 해석된 코드는 캐시에 보관하기 때문에 한 번 컴파일 된 후에는 빠르게 수행하는 장점이 있지만
 인터프리팅 방식보다는 훨씬 오래 걸리므로 한번만 실행하면 되는 코드는 인터프리팅 하는 것이 유리.


- 안드로이드
안드로이드 개발 언어가 OS에 독립적인 Java로 채택되면서 JVM이 필요했는데 라이센스 문제, 메모리 효율성 문제 등으로 초기에는 Dalvik VM(DVM)을 사용하게 된다.
패키징->설치->실행

1. Packaging
.java File---(java compiler)--->Java Bytecode.class ----(난독화)--->Optimized Java Bytecode.class ---(dxtool)---> *.dex ---(APK builder)---> APK

2. Install
  1) DVM(Dalvik Virtual Machine)
apk---(install)---> dex file ---(dexopt)---> 0dex file ---> DVM에서 로드
애플리케이션 설치 후 내부에 존재하는 .dex는 dalvik VM에서 dexopt에 의해 0dex 파일로 optimized된다. 
0dex는 특정 기기의 시스템에 최적화된 코드이므로 다른기기에서 사용할 수 없다. 이렇게 만들어진 0dex파일은  DVM에서 로드되어 사용된다. 
안드로이드 5.0 롤리팝 부터는 사용X -> ART로 대체.
DVM에서는 JIT(Just In Time)컴파일러 사용
- .dex 바이트코드를 네이티브 코드로 번역
- 앱 실행 시 컴파일 후 메모리에 올림.
- 설치 시 컴파일을 하지 않기 때문에 AOT보다 설치 속도 빠름.
- 실행 시 컴파일을 하기 때문에 AOT에 비해 실행 속도 느림.
- 용량 작음		 

  2) ART(Android RunTime) 
apk----(install)---->dex file ----(dex2oat Tool)--->odex ---->oat ----> ART runtime
Android 4.4 KitKat 이후 사용시작했으며 VM이 아니다. ART는 기계어로 해석된 애플리케이션을 실행시키기 위해 런타임 시 이용되는 라이브러리이다. 
.oat파일은 dex 파일 + .odex 파일 + elf 파일(실행 파일) 형식의 기계어를 포함하고 있기 때문에 용량이 크다.
AOT(Ahead Of Time) 컴파일러 
- ART내부 컴파일러로 JIT와는 달리 애플리케이션 설치 시점에 애플리케이션 전체 바이트 코드를 기계어로 번역한다. 
그렇기 때문에 설치 시간이 오래 걸리는 단점이 있지만 런타임에서 바이트 코드를 해석하는 시간을 제거했기 때문에 전체적인 퍼포먼스가 높아지고 배터리 성능이 향상된다.
설치 시점에 바이트코드가 모두 기계어로 해석되므로 인터프리터 방식을 사용하는 VM이 필요없다.

Android 누가(API 24)이후의 ART에서는 JIT와 AOT를 모두 사용한다.
최초 설치 시에는 JIT를 사용하여 설치 시간 및 용량을 적게 소모하게 한 뒤, 자주 사용하는 앱일 경우 AOT로 컴파일하는 식이다.

****안드로이드 4대 컴포넌트
1. Activitiy
- UI 화면을 담당하는 컴포넌트
2. Service
- 백그라운드에서 실행되는 프로세스. 서비스는 화면이 존재X.
3. Content Provider
- 데이터를 관리하고 다른 애플리케이션 데이터를 제공해주는 컴포넌트.
4. Broadcast receivers
- 다양한 이벤트와 정보를 받아 반응하는 컴포넌트.

-> 각각의 구성요소들은 Intent를 통해서 상호 통신한다. 즉, 액티비티에서 다른 구성요소를 호출할 때는 Intent를 거쳐야 한다.

****Intent
- 애플리케이션 컴포넌트(구성요소) 간에 작업 수행을 위한 정보를 전달하는 역할을 하며 통신수단.

****액티비티 생명주기
onCreate() - 액티비티가 생성될 때 호출되며 사용자 인터페이스 초기화에 사용됨. --(이후 호출)-->onStart()
onRestart() - 액티비티가 멈췄다가 다시 시작되기 바로 전에 호출됨.	 -> onStart()
onResume() - 액티비티가 사용자와 상호작용하기 바로 전에 호출됨.	-> onPause()
onPause() - 다른 액티비티가 보여질 때 호출됨. 데이터 저장, 스레드 중지 등의 처리를 하기에 적당한 메소드. 	-> onResume() 또는 onStop()
onStop() - 액티비티가 더이상 사용자에게 보여지지 않을 때 호출됨. 메모리가 부족할 경우에는 onStop() 메소드가 호출되지 않을 수도 있음.	-> onRestart() 또는 onDestroy()
onDestroy() - 액티비티가 소멸될 때 호출됨. finish() 메소드가 호출되거나 시스템이 메모리 확보를 위해 액티비티를 제거할 때 호출됨.	-> 없음
